name: Redeploy Bot (one or all)

on:
  workflow_dispatch:
    inputs:
      user:
        description: "User do bot (ex.: n8w0lff) ou 'all'"
        required: true
        default: "all"
      aws-region:
        description: "AWS Region"
        required: true
        default: "us-east-1"
      project-name:
        description: "Project name (prefixo)"
        required: true
        default: "lukras-platform"

jobs:
  redeploy:
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout infra repo
        uses: actions/checkout@v4

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ github.event.inputs.aws-region }}

      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1

      - name: Sanity check caller identity
        run: aws sts get-caller-identity

      - name: Read users from terraform.tfvars
        id: users
        run: |
          USERS=$(grep -A50 '^users' terraform.tfvars | tr -d '[:space:]' | sed -n 's/^users=\[\(.*\)\]/\1/p' | tr -d '"' )
          echo "users=${USERS}" >> $GITHUB_OUTPUT

      - name: Redeploy
        env:
          REGION:  ${{ github.event.inputs.aws-region }}
          PROJECT: ${{ github.event.inputs.project-name }}
          INPUT_USER: ${{ github.event.inputs.user }}
          USERS_CSV:  ${{ steps.users.outputs.users }}
        run: |
          set -euo pipefail

          CLUSTER="${PROJECT}-cluster"

          redeploy_one() {
            local user="$1"
            local family="${PROJECT}-${user}"
            local service="${PROJECT}-${user}"

            echo "==> Registering new task def revision (family: ${family})"
            REV_JSON=$(aws ecs describe-task-definition --task-definition "${family}" --query 'taskDefinition')
            CLEAN=$(echo "$REV_JSON" | jq 'del(.status, .taskDefinitionArn, .revision, .requiresAttributes, .registeredAt, .registeredBy, .compatibilities)')
            NEW_ARN=$(aws ecs register-task-definition \
              --cli-input-json "$(jq -c '{
                family,
                requiresCompatibilities,
                networkMode,
                cpu,
                memory,
                executionRoleArn,
                taskRoleArn,
                runtimePlatform,
                containerDefinitions,
                volumes
              }' --arg family "$family" <<< "$CLEAN")" \
              --query 'taskDefinition.taskDefinitionArn' --output text)

            echo "==> Updating service ${service} to ${NEW_ARN}"
            aws ecs update-service \
              --cluster "${CLUSTER}" \
              --service "${service}" \
              --task-definition "${NEW_ARN}" \
              --force-new-deployment >/dev/null

            echo "-> OK: ${service}"
          }

          if [ "${INPUT_USER}" = "all" ]; then
            IFS=',' read -ra USERS_ARR <<< "${USERS_CSV}"
            for U in "${USERS_ARR[@]}"; do
              [ -z "$U" ] && continue
              redeploy_one "$U"
            done
          else
            redeploy_one "${INPUT_USER}"
          fi
