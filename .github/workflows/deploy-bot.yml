name: Deploy bot (one or all)

on:
  workflow_dispatch:
    inputs:
      user:
        description: "Informe um user específico ou 'all'"
        required: true
        default: "all"

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    env:
      TF_VAR_FILE: terraform.tfvars

    steps:
      - name: Checkout infra repo
        uses: actions/checkout@v4

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ steps.region.outputs.region }}

      - name: Read region from terraform.tfvars
        id: region
        run: |
          set -euo pipefail
          REGION=$(awk -F'=' '/^\s*aws_region\s*=/{gsub(/[ "]/,"",$2);print $2}' "${TF_VAR_FILE}")
          echo "region=$REGION" >> $GITHUB_OUTPUT

      - name: Compute service list
        id: svc
        run: |
          set -euo pipefail
          PROJECT=$(awk -F'=' '/^\s*project_name\s*=/{gsub(/[ "]/,"",$2);print $2}' "${TF_VAR_FILE}")
          USER_INPUT="${{ github.event.inputs.user }}"

          if [ "$USER_INPUT" = "all" ]; then
            # extrai as chaves (users) do bloco users = { ... }
            USERS=$(awk '
              $0 ~ /^\s*users\s*=\s*{/ {inblock=1; next}
              inblock && $0 ~ /^}/ {inblock=0}
              inblock && $0 ~ /^[[:space:]]*[A-Za-z0-9_-]+[[:space:]]*=/ {
                key=$1; gsub(":","",key); gsub("=","",key); gsub(/[[:space:]]/,"",key);
                print key
              }' "${TF_VAR_FILE}" | tr '\n' ' ')
          else
            USERS="$USER_INPUT"
          fi

          if [ -z "$USERS" ]; then
            echo "Nenhum user encontrado."
            exit 1
          fi

          SVC_LIST=""
          for U in $USERS; do
            SVC_LIST="$SVC_LIST ${PROJECT}-${U}"
          done

          echo "services=${SVC_LIST}" >> $GITHUB_OUTPUT
          echo "Services: ${SVC_LIST}"

      - name: Force new deployment on existing services
        run: |
          set -euo pipefail
          REGION="${{ steps.region.outputs.region }}"
          for SVC in ${{ steps.svc.outputs.services }}; do
            echo "--------------------------------------------------"
            echo "Atualizando service: ${SVC}"
            echo "--------------------------------------------------"
            if aws ecs describe-services --cluster "${{ env.PROJECT_NAME }}-cluster" --services "$SVC" >/dev/null 2>&1; then
              aws ecs update-service \
                --cluster "${{ env.PROJECT_NAME }}-cluster" \
                --service "$SVC" \
                --force-new-deployment \
                >/dev/null
              echo "OK: force-new-deployment enviado para ${SVC}"
            else
              echo "AVISO: service ${SVC} não existe. Para ONBOARD, adicione o user no terraform.tfvars e rode 'deploy-infra'."
            fi
          done
        env:
          PROJECT_NAME: ${{ steps.project.outputs.name }}

      - name: Read project from terraform.tfvars
        id: project
        run: |
          set -euo pipefail
          NAME=$(awk -F'=' '/^\s*project_name\s*=/{gsub(/[ "]/,"",$2);print $2}' "${TF_VAR_FILE}")
          echo "name=$NAME" >> $GITHUB_OUTPUT
